var searchIndex = new Map(JSON.parse('[\
["atium",{"doc":"","t":"CCCCCCCFNNNNNNNNNNNONNNNNNFNNNNNNNNNNNNNNNNNNOKMMMNMMFNNNNNNNNNNNONNNNNNHFNNNNNNNNNNNONNNNNNN","n":["algebra","add","constant","expression","multiply","parser","variable","Add","__clone_box","as_any","borrow","borrow_mut","clone","clone_into","debug","eval","from","into","new","ops","simplify","to_owned","to_typist","try_from","try_into","type_id","Constant","__clone_box","as_any","borrow","borrow_mut","clone","clone_into","debug","eval","fmt","from","into","new","simplify","to_owned","to_typist","try_from","try_into","type_id","value","Expression","as_any","debug","eval","fmt","simplify","to_typist","Multiply","__clone_box","as_any","borrow","borrow_mut","clone","clone_into","debug","eval","from","into","new","ops","simplify","to_owned","to_typist","try_from","try_into","type_id","parse_expression","Variable","__clone_box","as_any","borrow","borrow_mut","clone","clone_into","debug","eval","fmt","from","into","name","new","simplify","to_owned","to_typist","try_from","try_into","type_id"],"q":[[0,"atium"],[1,"atium::algebra"],[7,"atium::algebra::add"],[26,"atium::algebra::constant"],[46,"atium::algebra::expression"],[53,"atium::algebra::multiply"],[72,"atium::algebra::parser"],[73,"atium::algebra::variable"],[93,"dyn_clone::sealed"],[94,"core::any"],[95,"alloc::string"],[96,"alloc::boxed"],[97,"alloc::vec"],[98,"core::result"],[99,"core::any"],[100,"core::fmt"]],"d":["","","","","","","","<code>Add</code> struct represents an addition operation in an …","","Returns a reference to the expression as a <code>dyn Any</code>, which …","","","","","Returns a debug string for the expression. The <code>indent</code> …","Evaluates the expression and returns a new expression.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Simplifies the expression and returns a new simplified …","","Returns a Typist string for the expression.","","","","<code>Constant</code> struct represents a constant value in an …","","Returns a reference to the expression as a <code>dyn Any</code>, which …","","","","","Returns a debug string for the expression. The <code>indent</code> …","Evaluates the expression and returns a new expression. For …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Constructs a new <code>Constant</code> instance.","Simplifies the expression and returns a new simplified …","","Returns a Typist string for the expression. For a <code>Constant</code>…","","","","","The <code>Expression</code> trait represents an algebraic expression. …","Returns a reference to the expression as a <code>dyn Any</code>, which …","Returns a debug string for the expression. The <code>indent</code> …","Evaluates the expression and returns a new expression.","","Simplifies the expression and returns a new simplified …","Returns a Typist string for the expression.","<code>Multiply</code> struct represents a multiplication operation in …","","Returns a reference to the expression as a <code>dyn Any</code>, which …","","","","","Returns a debug string for the expression. The <code>indent</code> …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Constructs a new <code>Multiply</code> instance.","","Simplifies the expression and returns a new simplified …","","Returns a Typist string for the expression.","","","","Parses an expression from the input string.","<code>Variable</code> struct represents a variable in an expression …","","Returns a reference to the expression as a <code>dyn Any</code>, which …","","","","","Returns a debug string for the expression. The <code>indent</code> …","Evaluates the expression and returns a new expression. For …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Constructs a new <code>Variable</code> instance.","Simplifies the expression and returns a new simplified …","","Returns a Typist string for the expression. For a <code>Variable</code>…","","",""],"i":[0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,7,7,7,7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19],"f":[0,0,0,0,0,0,0,0,[[-1,1],2,[]],[3,4],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[[-1,-2],2,[],[]],[[3,5],6],[3,[[8,[7]]]],[-1,-1,[]],[-1,-2,[],[]],[[[9,[[8,[7]]]]],3],0,[3,[[8,[7]]]],[-1,-2,[],[]],[3,6],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],0,[[-1,1],2,[]],[12,4],[-1,-2,[],[]],[-1,-2,[],[]],[12,12],[[-1,-2],2,[],[]],[[12,5],6],[12,[[8,[7]]]],[[12,13],14],[-1,-1,[]],[-1,-2,[],[]],[15,12],[12,[[8,[7]]]],[-1,-2,[],[]],[12,6],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],0,0,[7,4],[[7,5],6],[7,[[8,[7]]]],[[7,13],14],[7,[[8,[7]]]],[7,6],0,[[-1,1],2,[]],[16,4],[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[[-1,-2],2,[],[]],[[16,5],6],[16,[[8,[7]]]],[-1,-1,[]],[-1,-2,[],[]],[[[9,[[8,[7]]]]],16],0,[16,[[8,[7]]]],[-1,-2,[],[]],[16,6],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[17,[[18,[17,[8,[7]]]]]],0,[[-1,1],2,[]],[19,4],[-1,-2,[],[]],[-1,-2,[],[]],[19,19],[[-1,-2],2,[],[]],[[19,5],6],[19,[[8,[7]]]],[[19,13],14],[-1,-1,[]],[-1,-2,[],[]],0,[17,19],[19,[[8,[7]]]],[-1,-2,[],[]],[19,6],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]]],"c":[],"p":[[5,"Private",93],[1,"tuple"],[5,"Add",7],[10,"Any",94],[1,"usize"],[5,"String",95],[10,"Expression",46],[5,"Box",96],[5,"Vec",97],[6,"Result",98],[5,"TypeId",94],[5,"Constant",26],[5,"Formatter",99],[8,"Result",99],[1,"f64"],[5,"Multiply",53],[1,"str"],[8,"IResult",100],[5,"Variable",73]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
